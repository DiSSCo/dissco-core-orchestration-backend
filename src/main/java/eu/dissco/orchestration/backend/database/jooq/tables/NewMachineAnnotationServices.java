/*
 * This file is generated by jOOQ.
 */
package eu.dissco.orchestration.backend.database.jooq.tables;


import eu.dissco.orchestration.backend.database.jooq.Keys;
import eu.dissco.orchestration.backend.database.jooq.Public;
import eu.dissco.orchestration.backend.database.jooq.tables.records.NewMachineAnnotationServicesRecord;
import java.time.Instant;
import java.util.Collection;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class NewMachineAnnotationServices extends TableImpl<NewMachineAnnotationServicesRecord> {

  /**
   * The reference instance of
   * <code>public.new_machine_annotation_services</code>
   */
  public static final NewMachineAnnotationServices NEW_MACHINE_ANNOTATION_SERVICES = new NewMachineAnnotationServices();
  private static final long serialVersionUID = 1L;
  /**
   * The column <code>public.new_machine_annotation_services.id</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, String> ID = createField(
      DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");
  /**
   * The column <code>public.new_machine_annotation_services.version</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, Integer> VERSION = createField(
      DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");
  /**
   * The column <code>public.new_machine_annotation_services.name</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, String> NAME = createField(
      DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.date_created</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, Instant> DATE_CREATED = createField(
      DSL.name("date_created"), SQLDataType.INSTANT.nullable(false), this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.date_modified</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, Instant> DATE_MODIFIED = createField(
      DSL.name("date_modified"), SQLDataType.INSTANT.nullable(false), this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.date_tombstoned</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, Instant> DATE_TOMBSTONED = createField(
      DSL.name("date_tombstoned"), SQLDataType.INSTANT, this, "");
  /**
   * The column <code>public.new_machine_annotation_services.creator</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, String> CREATOR = createField(
      DSL.name("creator"), SQLDataType.CLOB.nullable(false), this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.container_image</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, String> CONTAINER_IMAGE = createField(
      DSL.name("container_image"), SQLDataType.CLOB.nullable(false), this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.container_image_tag</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, String> CONTAINER_IMAGE_TAG = createField(
      DSL.name("container_image_tag"), SQLDataType.CLOB.nullable(false), this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.creative_work_state</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, String> CREATIVE_WORK_STATE = createField(
      DSL.name("creative_work_state"), SQLDataType.CLOB, this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.source_code_repository</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, String> SOURCE_CODE_REPOSITORY = createField(
      DSL.name("source_code_repository"), SQLDataType.CLOB, this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.service_availability</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, String> SERVICE_AVAILABILITY = createField(
      DSL.name("service_availability"), SQLDataType.CLOB, this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.code_maintainer</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, String> CODE_MAINTAINER = createField(
      DSL.name("code_maintainer"), SQLDataType.CLOB, this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.code_license</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, String> CODE_LICENSE = createField(
      DSL.name("code_license"), SQLDataType.CLOB, this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.support_contact</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, String> SUPPORT_CONTACT = createField(
      DSL.name("support_contact"), SQLDataType.CLOB, this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.batching_permitted</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, Boolean> BATCHING_PERMITTED = createField(
      DSL.name("batching_permitted"), SQLDataType.BOOLEAN, this, "");
  /**
   * The column
   * <code>public.new_machine_annotation_services.time_to_live</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, Integer> TIME_TO_LIVE = createField(
      DSL.name("time_to_live"), SQLDataType.INTEGER.nullable(false)
          .defaultValue(DSL.field(DSL.raw("86400"), SQLDataType.INTEGER)), this, "");
  /**
   * The column <code>public.new_machine_annotation_services.data</code>.
   */
  public final TableField<NewMachineAnnotationServicesRecord, JSONB> DATA = createField(
      DSL.name("data"), SQLDataType.JSONB.nullable(false), this, "");

  private NewMachineAnnotationServices(Name alias,
      Table<NewMachineAnnotationServicesRecord> aliased) {
    this(alias, aliased, (Field<?>[]) null, null);
  }

  private NewMachineAnnotationServices(Name alias,
      Table<NewMachineAnnotationServicesRecord> aliased, Field<?>[] parameters, Condition where) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
  }

  /**
   * Create an aliased <code>public.new_machine_annotation_services</code> table reference
   */
  public NewMachineAnnotationServices(String alias) {
    this(DSL.name(alias), NEW_MACHINE_ANNOTATION_SERVICES);
  }

  /**
   * Create an aliased <code>public.new_machine_annotation_services</code> table reference
   */
  public NewMachineAnnotationServices(Name alias) {
    this(alias, NEW_MACHINE_ANNOTATION_SERVICES);
  }

  /**
   * Create a <code>public.new_machine_annotation_services</code> table reference
   */
  public NewMachineAnnotationServices() {
    this(DSL.name("new_machine_annotation_services"), null);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<NewMachineAnnotationServicesRecord> getRecordType() {
    return NewMachineAnnotationServicesRecord.class;
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public UniqueKey<NewMachineAnnotationServicesRecord> getPrimaryKey() {
    return Keys.NEW_MACHINE_ANNOTATION_SERVICES_PKEY;
  }

  @Override
  public NewMachineAnnotationServices as(String alias) {
    return new NewMachineAnnotationServices(DSL.name(alias), this);
  }

  @Override
  public NewMachineAnnotationServices as(Name alias) {
    return new NewMachineAnnotationServices(alias, this);
  }

  @Override
  public NewMachineAnnotationServices as(Table<?> alias) {
    return new NewMachineAnnotationServices(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public NewMachineAnnotationServices rename(String name) {
    return new NewMachineAnnotationServices(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public NewMachineAnnotationServices rename(Name name) {
    return new NewMachineAnnotationServices(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public NewMachineAnnotationServices rename(Table<?> name) {
    return new NewMachineAnnotationServices(name.getQualifiedName(), null);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public NewMachineAnnotationServices where(Condition condition) {
    return new NewMachineAnnotationServices(getQualifiedName(), aliased() ? this : null, null,
        condition);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public NewMachineAnnotationServices where(Collection<? extends Condition> conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public NewMachineAnnotationServices where(Condition... conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public NewMachineAnnotationServices where(Field<Boolean> condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public NewMachineAnnotationServices where(SQL condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public NewMachineAnnotationServices where(@Stringly.SQL String condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public NewMachineAnnotationServices where(@Stringly.SQL String condition, Object... binds) {
    return where(DSL.condition(condition, binds));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public NewMachineAnnotationServices where(@Stringly.SQL String condition, QueryPart... parts) {
    return where(DSL.condition(condition, parts));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public NewMachineAnnotationServices whereExists(Select<?> select) {
    return where(DSL.exists(select));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public NewMachineAnnotationServices whereNotExists(Select<?> select) {
    return where(DSL.notExists(select));
  }
}
