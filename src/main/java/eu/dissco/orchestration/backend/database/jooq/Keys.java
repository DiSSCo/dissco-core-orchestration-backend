/*
 * This file is generated by jOOQ.
 */
package eu.dissco.orchestration.backend.database.jooq;


import eu.dissco.orchestration.backend.database.jooq.tables.Handles;
import eu.dissco.orchestration.backend.database.jooq.tables.MachineAnnotationServices;
import eu.dissco.orchestration.backend.database.jooq.tables.Mapping;
import eu.dissco.orchestration.backend.database.jooq.tables.SourceSystem;
import eu.dissco.orchestration.backend.database.jooq.tables.records.HandlesRecord;
import eu.dissco.orchestration.backend.database.jooq.tables.records.MachineAnnotationServicesRecord;
import eu.dissco.orchestration.backend.database.jooq.tables.records.MappingRecord;
import eu.dissco.orchestration.backend.database.jooq.tables.records.SourceSystemRecord;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in public.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Keys {

  // -------------------------------------------------------------------------
  // UNIQUE and PRIMARY KEY definitions
  // -------------------------------------------------------------------------

  public static final UniqueKey<HandlesRecord> HANDLES_PKEY = Internal.createUniqueKey(
      Handles.HANDLES, DSL.name("handles_pkey"),
      new TableField[]{Handles.HANDLES.HANDLE, Handles.HANDLES.IDX}, true);
  public static final UniqueKey<MachineAnnotationServicesRecord> MACHINE_ANNOTATION_SERVICES_PKEY = Internal.createUniqueKey(
      MachineAnnotationServices.MACHINE_ANNOTATION_SERVICES,
      DSL.name("machine_annotation_services_pkey"),
      new TableField[]{MachineAnnotationServices.MACHINE_ANNOTATION_SERVICES.ID}, true);
  public static final UniqueKey<MappingRecord> NEW_MAPPING_PK = Internal.createUniqueKey(
      Mapping.MAPPING, DSL.name("new_mapping_pk"),
      new TableField[]{Mapping.MAPPING.ID, Mapping.MAPPING.VERSION}, true);
  public static final UniqueKey<SourceSystemRecord> NEW_SOURCE_SYSTEM_PKEY = Internal.createUniqueKey(
      SourceSystem.SOURCE_SYSTEM, DSL.name("new_source_system_pkey"),
      new TableField[]{SourceSystem.SOURCE_SYSTEM.ID}, true);
}
