/*
 * This file is generated by jOOQ.
 */
package eu.dissco.orchestration.backend.database.jooq.tables;


import eu.dissco.orchestration.backend.database.jooq.Keys;
import eu.dissco.orchestration.backend.database.jooq.Public;
import eu.dissco.orchestration.backend.database.jooq.enums.TranslatorType;
import eu.dissco.orchestration.backend.database.jooq.tables.records.NewSourceSystemRecord;

import java.time.Instant;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewSourceSystem extends TableImpl<NewSourceSystemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.new_source_system</code>
     */
    public static final NewSourceSystem NEW_SOURCE_SYSTEM = new NewSourceSystem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewSourceSystemRecord> getRecordType() {
        return NewSourceSystemRecord.class;
    }

    /**
     * The column <code>public.new_source_system.id</code>.
     */
    public final TableField<NewSourceSystemRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_source_system.name</code>.
     */
    public final TableField<NewSourceSystemRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_source_system.endpoint</code>.
     */
    public final TableField<NewSourceSystemRecord, String> ENDPOINT = createField(DSL.name("endpoint"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_source_system.date_created</code>.
     */
    public final TableField<NewSourceSystemRecord, Instant> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.new_source_system.date_modified</code>.
     */
    public final TableField<NewSourceSystemRecord, Instant> DATE_MODIFIED = createField(DSL.name("date_modified"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.new_source_system.date_tombstoned</code>.
     */
    public final TableField<NewSourceSystemRecord, Instant> DATE_TOMBSTONED = createField(DSL.name("date_tombstoned"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>public.new_source_system.mapping_id</code>.
     */
    public final TableField<NewSourceSystemRecord, String> MAPPING_ID = createField(DSL.name("mapping_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_source_system.version</code>.
     */
    public final TableField<NewSourceSystemRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.new_source_system.creator</code>.
     */
    public final TableField<NewSourceSystemRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_source_system.translator_type</code>.
     */
    public final TableField<NewSourceSystemRecord, TranslatorType> TRANSLATOR_TYPE = createField(DSL.name("translator_type"), SQLDataType.VARCHAR.asEnumDataType(TranslatorType.class), this, "");

    /**
     * The column <code>public.new_source_system.data</code>.
     */
    public final TableField<NewSourceSystemRecord, JSONB> DATA = createField(DSL.name("data"), SQLDataType.JSONB.nullable(false), this, "");

    private NewSourceSystem(Name alias, Table<NewSourceSystemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NewSourceSystem(Name alias, Table<NewSourceSystemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.new_source_system</code> table reference
     */
    public NewSourceSystem(String alias) {
        this(DSL.name(alias), NEW_SOURCE_SYSTEM);
    }

    /**
     * Create an aliased <code>public.new_source_system</code> table reference
     */
    public NewSourceSystem(Name alias) {
        this(alias, NEW_SOURCE_SYSTEM);
    }

    /**
     * Create a <code>public.new_source_system</code> table reference
     */
    public NewSourceSystem() {
        this(DSL.name("new_source_system"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<NewSourceSystemRecord> getPrimaryKey() {
        return Keys.NEWNEW_SOURCE_SYSTEM_PKEY;
    }

    @Override
    public NewSourceSystem as(String alias) {
        return new NewSourceSystem(DSL.name(alias), this);
    }

    @Override
    public NewSourceSystem as(Name alias) {
        return new NewSourceSystem(alias, this);
    }

    @Override
    public NewSourceSystem as(Table<?> alias) {
        return new NewSourceSystem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NewSourceSystem rename(String name) {
        return new NewSourceSystem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewSourceSystem rename(Name name) {
        return new NewSourceSystem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewSourceSystem rename(Table<?> name) {
        return new NewSourceSystem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewSourceSystem where(Condition condition) {
        return new NewSourceSystem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewSourceSystem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewSourceSystem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewSourceSystem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NewSourceSystem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NewSourceSystem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NewSourceSystem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NewSourceSystem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewSourceSystem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewSourceSystem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
