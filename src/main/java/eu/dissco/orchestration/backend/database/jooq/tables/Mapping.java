/*
 * This file is generated by jOOQ.
 */
package eu.dissco.orchestration.backend.database.jooq.tables;


import eu.dissco.orchestration.backend.database.jooq.Keys;
import eu.dissco.orchestration.backend.database.jooq.Public;
import eu.dissco.orchestration.backend.database.jooq.tables.records.MappingRecord;
import java.time.Instant;
import java.util.Collection;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Mapping extends TableImpl<MappingRecord> {

  /**
   * The reference instance of <code>public.mapping</code>
   */
  public static final Mapping MAPPING = new Mapping();
  private static final long serialVersionUID = 1L;
  /**
   * The column <code>public.mapping.id</code>.
   */
  public final TableField<MappingRecord, String> ID = createField(DSL.name("id"),
      SQLDataType.CLOB.nullable(false), this, "");
  /**
   * The column <code>public.mapping.version</code>.
   */
  public final TableField<MappingRecord, Integer> VERSION = createField(DSL.name("version"),
      SQLDataType.INTEGER.nullable(false), this, "");
  /**
   * The column <code>public.mapping.name</code>.
   */
  public final TableField<MappingRecord, String> NAME = createField(DSL.name("name"),
      SQLDataType.CLOB.nullable(false), this, "");
  /**
   * The column <code>public.mapping.description</code>.
   */
  public final TableField<MappingRecord, String> DESCRIPTION = createField(DSL.name("description"),
      SQLDataType.CLOB, this, "");
  /**
   * The column <code>public.mapping.mapping</code>.
   */
  public final TableField<MappingRecord, JSONB> MAPPING_ = createField(DSL.name("mapping"),
      SQLDataType.JSONB.nullable(false), this, "");
  /**
   * The column <code>public.mapping.created</code>.
   */
  public final TableField<MappingRecord, Instant> CREATED = createField(DSL.name("created"),
      SQLDataType.INSTANT.nullable(false), this, "");
  /**
   * The column <code>public.mapping.creator</code>.
   */
  public final TableField<MappingRecord, String> CREATOR = createField(DSL.name("creator"),
      SQLDataType.CLOB.nullable(false), this, "");
  /**
   * The column <code>public.mapping.deleted</code>.
   */
  public final TableField<MappingRecord, Instant> DELETED = createField(DSL.name("deleted"),
      SQLDataType.INSTANT, this, "");
  /**
   * The column <code>public.mapping.sourcedatastandard</code>.
   */
  public final TableField<MappingRecord, String> SOURCEDATASTANDARD = createField(
      DSL.name("sourcedatastandard"), SQLDataType.VARCHAR.nullable(false), this, "");

  private Mapping(Name alias, Table<MappingRecord> aliased) {
    this(alias, aliased, (Field<?>[]) null, null);
  }

  private Mapping(Name alias, Table<MappingRecord> aliased, Field<?>[] parameters,
      Condition where) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
  }

  /**
   * Create an aliased <code>public.mapping</code> table reference
   */
  public Mapping(String alias) {
    this(DSL.name(alias), MAPPING);
  }

  /**
   * Create an aliased <code>public.mapping</code> table reference
   */
  public Mapping(Name alias) {
    this(alias, MAPPING);
  }

  /**
   * Create a <code>public.mapping</code> table reference
   */
  public Mapping() {
    this(DSL.name("mapping"), null);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<MappingRecord> getRecordType() {
    return MappingRecord.class;
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public UniqueKey<MappingRecord> getPrimaryKey() {
    return Keys.NEW_MAPPING_PK;
  }

  @Override
  public Mapping as(String alias) {
    return new Mapping(DSL.name(alias), this);
  }

  @Override
  public Mapping as(Name alias) {
    return new Mapping(alias, this);
  }

  @Override
  public Mapping as(Table<?> alias) {
    return new Mapping(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public Mapping rename(String name) {
    return new Mapping(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Mapping rename(Name name) {
    return new Mapping(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public Mapping rename(Table<?> name) {
    return new Mapping(name.getQualifiedName(), null);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Mapping where(Condition condition) {
    return new Mapping(getQualifiedName(), aliased() ? this : null, null, condition);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Mapping where(Collection<? extends Condition> conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Mapping where(Condition... conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Mapping where(Field<Boolean> condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Mapping where(SQL condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Mapping where(@Stringly.SQL String condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Mapping where(@Stringly.SQL String condition, Object... binds) {
    return where(DSL.condition(condition, binds));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Mapping where(@Stringly.SQL String condition, QueryPart... parts) {
    return where(DSL.condition(condition, parts));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Mapping whereExists(Select<?> select) {
    return where(DSL.exists(select));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Mapping whereNotExists(Select<?> select) {
    return where(DSL.notExists(select));
  }
}
