/*
 * This file is generated by jOOQ.
 */
package eu.dissco.orchestration.backend.database.jooq.tables.records;


import eu.dissco.orchestration.backend.database.jooq.tables.Mapping;
import java.time.Instant;
import org.jooq.JSONB;
import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MappingRecord extends UpdatableRecordImpl<MappingRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * Create a detached MappingRecord
   */
  public MappingRecord() {
    super(Mapping.MAPPING);
  }

  /**
   * Create a detached, initialised MappingRecord
   */
  public MappingRecord(String id, Integer version, String name, String description, JSONB mapping,
      Instant created, String creator, Instant deleted, String sourcedatastandard) {
    super(Mapping.MAPPING);

    setId(id);
    setVersion(version);
    setName(name);
    setDescription(description);
    setMapping(mapping);
    setCreated(created);
    setCreator(creator);
    setDeleted(deleted);
    setSourcedatastandard(sourcedatastandard);
    resetChangedOnNotNull();
  }

  /**
   * Getter for <code>public.mapping.id</code>.
   */
  public String getId() {
    return (String) get(0);
  }

  /**
   * Setter for <code>public.mapping.id</code>.
   */
  public void setId(String value) {
    set(0, value);
  }

  /**
   * Getter for <code>public.mapping.version</code>.
   */
  public Integer getVersion() {
    return (Integer) get(1);
  }

  /**
   * Setter for <code>public.mapping.version</code>.
   */
  public void setVersion(Integer value) {
    set(1, value);
  }

  /**
   * Getter for <code>public.mapping.name</code>.
   */
  public String getName() {
    return (String) get(2);
  }

  /**
   * Setter for <code>public.mapping.name</code>.
   */
  public void setName(String value) {
    set(2, value);
  }

  /**
   * Getter for <code>public.mapping.description</code>.
   */
  public String getDescription() {
    return (String) get(3);
  }

  /**
   * Setter for <code>public.mapping.description</code>.
   */
  public void setDescription(String value) {
    set(3, value);
  }

  /**
   * Getter for <code>public.mapping.mapping</code>.
   */
  public JSONB getMapping() {
    return (JSONB) get(4);
  }

  /**
   * Setter for <code>public.mapping.mapping</code>.
   */
  public void setMapping(JSONB value) {
    set(4, value);
  }

  /**
   * Getter for <code>public.mapping.created</code>.
   */
  public Instant getCreated() {
    return (Instant) get(5);
  }

  /**
   * Setter for <code>public.mapping.created</code>.
   */
  public void setCreated(Instant value) {
    set(5, value);
  }

  /**
   * Getter for <code>public.mapping.creator</code>.
   */
  public String getCreator() {
    return (String) get(6);
  }

  /**
   * Setter for <code>public.mapping.creator</code>.
   */
  public void setCreator(String value) {
    set(6, value);
  }

  /**
   * Getter for <code>public.mapping.deleted</code>.
   */
  public Instant getDeleted() {
    return (Instant) get(7);
  }

  /**
   * Setter for <code>public.mapping.deleted</code>.
   */
  public void setDeleted(Instant value) {
    set(7, value);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  /**
   * Getter for <code>public.mapping.sourcedatastandard</code>.
   */
  public String getSourcedatastandard() {
    return (String) get(8);
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Setter for <code>public.mapping.sourcedatastandard</code>.
   */
  public void setSourcedatastandard(String value) {
    set(8, value);
  }

  @Override
  public Record2<String, Integer> key() {
    return (Record2) super.key();
  }
}
